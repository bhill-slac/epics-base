diff --git a/configure/CONFIG_BASE b/configure/CONFIG_BASE
index 373b831..965c4fa 100644
--- a/configure/CONFIG_BASE
+++ b/configure/CONFIG_BASE
@@ -112,7 +112,7 @@ DBST = dbst
 endif
 
 ifndef MSI
-MSI = msi
+MSI = $(TOOLS)/msi
 endif
 
 
diff --git a/configure/CONFIG_SITE b/configure/CONFIG_SITE
index 3063a99..8cfa3be 100644
--- a/configure/CONFIG_SITE
+++ b/configure/CONFIG_SITE
@@ -80,6 +80,9 @@
 #       linux-cris_v32          (Axis GNU crosscompiler on linux-x86 host)
 #       linux-microblaze
 #       linux-xscale_be
+#       linuxRT-x86             (linux-rt with uClibc; buildroot; created by Till Strauman)
+#       linuxRT-x86_64          (linux-rt with uClibc; buildroot; created by Till Strauman)
+#       linuxRT-ppcP2020        (linux-rt with uClibc; buildroot; created by Till Strauman)
 #       vxWorks-486
 #       vxWorks-68040
 #       vxWorks-68040lc
@@ -113,8 +116,15 @@
 # configure/os/CONFIG_SITE.<host>.Common files will
 # override 
 #
-CROSS_COMPILER_TARGET_ARCHS=
-#CROSS_COMPILER_TARGET_ARCHS=vxWorks-ppc32
+#CROSS_COMPILER_TARGET_ARCHS=
+#CROSS_COMPILER_TARGET_ARCHS=vxWorks-68040
+#CROSS_COMPILER_TARGET_ARCHS=rt-linux
+
+#CROSS_COMPILER_TARGET_ARCHS=linuxRT-x86 linuxRT-x86_64
+
+CROSS_COMPILER_TARGET_ARCHS=RTEMS-beatnik RTEMS-mvme3100 RTEMS-uC5282 vxWorks-ppc604_long vxWorks-mpc8540 vxWorks-ppc604_altivec linuxRT_glibc-x86_64 linuxRT_glibc-i686 
+
+
 
 #  If only a subset of the host architectures perform
 #  the build for the CROSS_COMPILER_TARGET_ARCHS
@@ -136,7 +146,7 @@ SHARED_LIBRARIES=YES
 #  Build client objects statically ?
 #        must be either YES or NO
 #
-STATIC_BUILD=NO
+STATIC_BUILD=YES
 
 #  Should header dependancy files be automatically generated
 #  for each C/C++ created object file?
@@ -185,7 +195,8 @@ USE_POSIX_THREAD_PRIORITY_SCHEDULING = YES
 
 #  Site version number, if set will append '-' and this string to the
 #  EPICS version number string that is reported by many tools
-EPICS_SITE_VERSION =
+# Optimized Build
+EPICS_SITE_VERSION = 1.2
 
 # For GNU compiler, use pipes rather than temporary files for communication 
 # between the various stages of compilation.
diff --git a/configure/CONFIG_SITE_ENV b/configure/CONFIG_SITE_ENV
index 75bf1a2..d1bc883 100644
--- a/configure/CONFIG_SITE_ENV
+++ b/configure/CONFIG_SITE_ENV
@@ -45,7 +45,9 @@
 #	(see: http://www.worldtimezone.org/daylight.html)
 #
 # These values are for 2011:
-EPICS_TIMEZONE=CUS::360:031302:110602
+#EPICS_TIMEZONE=CUS::360:031302:110602
+
+EPICS_TIMEZONE=PUS::480:031302:110602
 #EPICS_TIMEZONE=MET::-60:032702:103002
 
 # EPICS_TS_NTP_INET
diff --git a/configure/os/CONFIG.Common.RTEMS b/configure/os/CONFIG.Common.RTEMS
index 9e6a1ad..b73f154 100644
--- a/configure/os/CONFIG.Common.RTEMS
+++ b/configure/os/CONFIG.Common.RTEMS
@@ -1,7 +1,7 @@
 #
 # This file contains definitions for RTEMS builds
 #
-# $Revision-Id$
+# CONFIG.Common.RTEMS,v 1.44.2.8 2004/11/30 19:41:55 norume Exp
 # Author: W. Eric Norum
 #         University of Saskatchewan
 #         eric.norum@usask.ca
@@ -14,35 +14,64 @@
 #
 
 #-------------------------------------------------------
+# Where to find RTEMS
+#RTEMS_BASE=/opt/rtems-4.7
+#RTEMS_VERSION=4.7
+# T.S. 8/7/2002: cannot override this from CONFIG_SITE because of
+# the includes :-(
+# RTEMS_BASE=/afs/slac/package/rtems/4.6.2/host/@sys/
+#
+# NOTE RTEMS_BASE is now defined by the site specific
+#      RTEMS makefile 'rtems-version.cfg'
+
+#-------------------------------------------------------
 # RTEMS tools are similar to UNIX tools
 -include $(CONFIG)/os/CONFIG.Common.UnixCommon
 
-GNU_TARGET_INCLUDE_DIR =
-unexport GCC_EXEC_PREFIX
-
-#--------------------------------------------------
-# Get RTEMS_BASE definition
--include $(CONFIG)/os/CONFIG_SITE.Common.RTEMS
+ifeq ($(T_A),RTEMS-mvme5500)
+RTEMS_SITE_TOP=/afs/slac/package/rtems/4.6.2/
+else
+#RTEMS_MAKEFILE_PATH=/afs/slac/package/rtems/4.7/target/ssrlApps/config
+# Also, change afs hard-coded path to the new path after relocating RTEMS
+# to NFS
+#
+# could use
+#
+# ifeq ($(wildcard /afs/slac/package/rtems)xx,xx)
+# RTEMS_SITE_TOP=<NFS-path>
+# else
+# RTEMS_SITE_TOP=<afs-path>
+# endif
+#
+# but I'm not sure if that causes problems with checkRelease
+# since checkRelease is pretty dumb...
+#
 
-ifneq ($(CONFIG),$(TOP)/configure)
--include $(TOP)/configure/CONFIG_SITE.Common.RTEMS
+RTEMS_SITE_TOP=/afs/slac/package/rtems/4.9.4/
+#RTEMS_SITE_TOP=/usr/local/lcls/rtems/rtems-4.9.4/
+RTEMS_PATCHLVL=rtems_p0
+SSRLAPPS_PATCHLVL=ssrlApps_p3
 endif
 
+RTEMS_BASE=$(RTEMS_SITE_TOP)/host/i386_linux2x/
+RTEMS_MAKEFILE_PATH=$(RTEMS_SITE_TOP)/target/$(RTEMS_PATCHLVL)/$(RTEMS_TARGET_CPU)-rtems/$(RTEMS_BSP)/
 #-------------------------------------------------------
 # Pick up the RTEMS tool/path definitions from the RTEMS BSP directory.
-include $(RTEMS_BASE)/$(RTEMS_TARGET_CPU)-rtems$(RTEMS_VERSION)/$(subst RTEMS-,,$(T_A))/Makefile.inc
+#include $(RTEMS_BASE)/$(RTEMS_TARGET_CPU)-rtems$(RTEMS_VERSION)/$(subst RTEMS-,,$(T_A))/Makefile.inc
+RTEMS_BSP=$(subst RTEMS-,,$(T_A))
+include $(RTEMS_MAKEFILE_PATH)/Makefile.inc
 include $(RTEMS_CUSTOM)
 include $(CONFIG.CC)
 
 #-------------------------------------------------------
 # RTEMS cross-development tools
-CC = $(RTEMS_TOOLS)/bin/$(CC_FOR_TARGET) $(GCCSPECS) -fasm
-CCC = $(RTEMS_TOOLS)/bin/$(CXX)
-CPP = $(RTEMS_TOOLS)/bin/$(CC_FOR_TARGET) -x c -E
-AR = $(RTEMS_TOOLS)/bin/$(AR_FOR_TARGET)
-LD = $(RTEMS_TOOLS)/bin/$(LD_FOR_TARGET) -r
+CC = $(RTEMS_BASE)/bin/$(CC_FOR_TARGET) $(GCCSPECS) -fasm
+CCC = $(RTEMS_BASE)/bin/$(CXX)
+CPP = $(RTEMS_BASE)/bin/$(CC_FOR_TARGET) -x c -E
+AR = $(RTEMS_BASE)/bin/$(AR_FOR_TARGET)
+LD = $(RTEMS_BASE)/bin/$(LD_FOR_TARGET) -r
 
-RANLIB := $(RTEMS_TOOLS)/bin/$(RANLIB)
+RANLIB := $(RTEMS_BASE)/bin/$(RANLIB)
 
 #-------------------------------------------------------
 # Build types
@@ -51,12 +80,14 @@ VALID_BUILDS = Ioc
 #--------------------------------------------------
 # The RTEMS Makefiles redefine several macros, so we have to
 # reset them to the proper EPICS values, from CONFIG_COMMON
-CFLAGS = $($(BUILD_CLASS)_CFLAGS) $(POSIX_CFLAGS) $(OPT_CFLAGS)\
+CFLAGS = $(CONFORM_CFLAGS)\
+ $($(BUILD_CLASS)_CFLAGS) $(POSIX_CFLAGS) $(OPT_CFLAGS)\
  $(DEBUG_CFLAGS) $(PIPE_CFLAGS) $(WARN_CFLAGS) $(TARGET_CFLAGS)\
  $(USR_CFLAGS) $(CMD_CFLAGS) $(ARCH_DEP_CFLAGS) $(CODE_CFLAGS)\
  $(STATIC_CFLAGS) $(OP_SYS_CFLAGS) $(LIBRARY_SRC_CFLAGS) $(HDEPENDS_CFLAGS)
 
-CXXFLAGS = $($(BUILD_CLASS)_CXXFLAGS) $(POSIX_CXXFLAGS) $(OPT_CXXFLAGS)\
+CXXFLAGS = $(CONFORM_CXXFLAGS)\
+ $($(BUILD_CLASS)_CXXFLAGS) $(POSIX_CXXFLAGS) $(OPT_CXXFLAGS)\
  $(DEBUG_CXXFLAGS) $(PIPE_CFLAGS) $(WARN_CXXFLAGS) $(TARGET_CXXFLAGS)\
  $(USR_CXXFLAGS) $(CMD_CXXFLAGS) $(ARCH_DEP_CXXFLAGS) $(CODE_CXXFLAGS)\
  $(STATIC_CXXCFLAGS) $(OP_SYS_CXXFLAGS) $(LIBRARY_SRC_CFLAGS) $(HDEPENDS_CFLAGS)
@@ -65,10 +96,12 @@ LDFLAGS = $(OPT_LDFLAGS) $(TARGET_LDFLAGS) $(USR_LDFLAGS) $(CMD_LDFLAGS)\
  $(POSIX_LDFLAGS) $(ARCH_DEP_LDFLAGS) $(DEBUG_LDFLAGS) $(OP_SYS_LDFLAGS)\
  $($(BUILD_CLASS)_LDFLAGS) $(RUNTIME_LDFLAGS) $(CODE_LDFLAGS)
 
-LDLIBS = $(POSIX_LDLIBS) $(ARCH_DEP_LDLIBS) $(DEBUG_LDLIBS) $(OP_SYS_LDLIBS)\
+LDLIBS = $(STATIC_LDLIBS)\
+ $(POSIX_LDLIBS) $(ARCH_DEP_LDLIBS) $(DEBUG_LDLIBS) $(OP_SYS_LDLIBS)\
  $(GNU_LDLIBS_$(GNU))
 
-CPPFLAGS += $($(BUILD_CLASS)_CPPFLAGS) $(POSIX_CPPFLAGS) $(OPT_CPPFLAGS)\
+CPPFLAGS += $(CONFORM_CPPFLAGS)\
+ $($(BUILD_CLASS)_CPPFLAGS) $(POSIX_CPPFLAGS) $(OPT_CPPFLAGS)\
  $(DEBUG_CPPFLAGS) $(WARN_CPPFLAGS) $(BASE_CPPFLAGS) $(TARGET_CPPFLAGS)\
  $(USR_CPPFLAGS) $(CMD_CPPFLAGS) $(ARCH_DEP_CPPFLAGS) $(OP_SYS_CPPFLAGS)\
  $(OP_SYS_INCLUDE_CPPFLAGS) $(CODE_CPPFLAGS)
@@ -82,8 +115,8 @@ CROSS_LDFLAGS =
 SHRLIB_CFLAGS =
 OPT_CFLAGS_YES   = $(CFLAGS_OPTIMIZE_V)
 OPT_CXXFLAGS_YES = $(CFLAGS_OPTIMIZE_V)
-OPT_CFLAGS_NO    = $(CFLAGS_DEBUG_V)
-OPT_CXXFLAGS_NO  = $(CFLAGS_DEBUG_V)
+OPT_CFLAGS_NO    = $(CFLAGS_DEBUG_V) -g
+OPT_CXXFLAGS_NO  = $(CFLAGS_DEBUG_V) -g
 
 MODEXT=.obj
 
@@ -93,7 +126,8 @@ OS_CLASS = RTEMS
 
 #--------------------------------------------------
 # Operating system flags
-OP_SYS_LDLIBS += -lrtemsCom -lc -lrtemscpu -lCom -lnfs -lm
+#OP_SYS_LDLIBS += -lrtemsCom -lrtemscpu -lCom -lrtemsNfs -lm
+OP_SYS_LDLIBS=
 OP_SYS_LDFLAGS += $(CPU_CFLAGS) -u Init \
                  $(PROJECT_RELEASE)/lib/no-dpmem.rel \
                  $(PROJECT_RELEASE)/lib/no-mp.rel \
@@ -145,8 +179,11 @@ CODE_CFLAGS =
 CODE_CXXFLAGS =
 
 #--------------------------------------------------
-# Override the usual RTEMS verbosity from ar
-ARFLAGS = rc
+# RTEMS uses the inline keyword so -pedantic causes too many problems.
+
+CONFORM_CFLAGS_STRICT = -ansi
+
+CONFORM_CXXFLAGS_STRICT = -ansi
 
 #--------------------------------------------------
 # Command-line input support
@@ -155,4 +192,4 @@ LDLIBS_READLINE = -lreadline -lncurses
 
 #--------------------------------------------------
 # Allow site overrides
--include $(CONFIG)/os/CONFIG_SITE.$(EPICS_HOST_ARCH).RTEMS
+-include $(CONFIG)/os/CONFIG_SITE.Common.RTEMS
diff --git a/configure/os/CONFIG.Common.RTEMS-beatnik b/configure/os/CONFIG.Common.RTEMS-beatnik
index 714bb37..c56f9d0 100644
--- a/configure/os/CONFIG.Common.RTEMS-beatnik
+++ b/configure/os/CONFIG.Common.RTEMS-beatnik
@@ -18,7 +18,7 @@ OP_SYS_LDLIBS += -lbspExt
 MUNCH_SUFFIX = .boot
 MUNCHNAME = $(PRODNAME:%$(EXE)=%$(MUNCH_SUFFIX))
 define MUNCH_CMD
-	$(RTEMS_TOOLS)/bin/$(OBJCOPY_FOR_TARGET) -O binary $< $@
+	$(RTEMS_BASE)/bin/$(OBJCOPY_FOR_TARGET) -O binary $< $@
 endef
 
 include $(CONFIG)/os/CONFIG.Common.RTEMS
@@ -35,3 +35,5 @@ INSTALL_RTEMSIMGS=$(RTEMSIMGS:%=$(INSTALL_BIN)/%)
 	$(OBJCOPY) -Obinary $^ $@
 
 #PRODTARGETS+=$(INSTALL_RTEMSSYMS) $(INSTALL_RTEMSIMGS)
+
+
diff --git a/configure/os/CONFIG.Common.RTEMS-mvme2100 b/configure/os/CONFIG.Common.RTEMS-mvme2100
index aac3650..a8474bd 100644
--- a/configure/os/CONFIG.Common.RTEMS-mvme2100
+++ b/configure/os/CONFIG.Common.RTEMS-mvme2100
@@ -16,9 +16,9 @@ OP_SYS_LDLIBS += -lbspExt
 MUNCH_SUFFIX = .boot
 MUNCHNAME = $(PRODNAME:%$(EXE)=%$(MUNCH_SUFFIX))
 define MUNCH_CMD
-	$(RTEMS_TOOLS)/bin/$(OBJCOPY_FOR_TARGET) -O binary -R .comment -S $< rtems
+	$(RTEMS_BASE)/bin/$(OBJCOPY_FOR_TARGET) -O binary -R .comment -S $< rtems
 	gzip -f9 rtems
-	$(RTEMS_TOOLS)/bin/$(LD_FOR_TARGET) -o $@ \
+	$(RTEMS_BASE)/bin/$(LD_FOR_TARGET) -o $@ \
 		 $(PROJECT_RELEASE)/lib/bootloader.o \
 		--just-symbols=$< \
 		-b binary rtems.gz \
diff --git a/configure/os/CONFIG.Common.RTEMS-mvme3100 b/configure/os/CONFIG.Common.RTEMS-mvme3100
index 5ee0757..ff0fad0 100644
--- a/configure/os/CONFIG.Common.RTEMS-mvme3100
+++ b/configure/os/CONFIG.Common.RTEMS-mvme3100
@@ -5,29 +5,28 @@
 #
 # All RTEMS targets use the same Makefile fragment
 #
-EXE = .elf
+override EXE=.elf
 RTEMS_TARGET_CPU = powerpc
-GNU_TARGET = powerpc-rtems
+GNU_TARGET=powerpc-rtems
 ARCH_DEP_CFLAGS += -DMY_DO_BOOTP=NULL
 ARCH_DEP_CFLAGS += -DHAVE_MOTLOAD
-ARCH_DEP_CFLAGS += -DRTEMS_NETWORK_CONFIG_MBUF_SPACE=2048
-ARCH_DEP_CFLAGS += -DRTEMS_NETWORK_CONFIG_CLUSTER_SPACE=5120
-
-OP_SYS_LDLIBS += -lbspExt
 
 MUNCH_SUFFIX = .boot
 MUNCHNAME = $(PRODNAME:%$(EXE)=%$(MUNCH_SUFFIX))
 define MUNCH_CMD
-	$(RTEMS_TOOLS)/bin/$(OBJCOPY_FOR_TARGET) -O binary $< $@
+	$(RTEMS_BASE)/bin/$(OBJCOPY_FOR_TARGET) -O binary $< $@
 endef
 
-include $(CONFIG)/os/CONFIG.Common.RTEMS
+CROSS_COMPILER_TARGET_ARCHS=RTEMS-beatnik
 
+include $(CONFIG)/os/CONFIG.Common.RTEMS
 RTEMSSYMS=$(PRODNAME:%$(EXE)=%.sym)
 RTEMSIMGS=$(PRODNAME:%$(EXE)=%.bin)
 INSTALL_RTEMSSYMS=$(RTEMSSYMS:%=$(INSTALL_BIN)/%)
 INSTALL_RTEMSIMGS=$(RTEMSIMGS:%=$(INSTALL_BIN)/%)
 
+#OP_SYS_LDLIBS += -lbspExt
+
 %.sym: %$(EXE)
 	$(XSYMS) $^ $@
 
diff --git a/configure/os/CONFIG.Common.RTEMS-mvme5500 b/configure/os/CONFIG.Common.RTEMS-mvme5500
index 39be356..6960268 100644
--- a/configure/os/CONFIG.Common.RTEMS-mvme5500
+++ b/configure/os/CONFIG.Common.RTEMS-mvme5500
@@ -5,21 +5,14 @@
 #
 # All RTEMS targets use the same Makefile fragment
 #
-EXE = .elf
 RTEMS_TARGET_CPU = powerpc
-GNU_TARGET = powerpc-rtems
 ARCH_DEP_CFLAGS += -DMY_DO_BOOTP=NULL
 ARCH_DEP_CFLAGS += -DHAVE_MOTLOAD
-ARCH_DEP_CFLAGS += -DRTEMS_NETWORK_CONFIG_MBUF_SPACE=2048
-ARCH_DEP_CFLAGS += -DRTEMS_NETWORK_CONFIG_CLUSTER_SPACE=5120
-ARCH_DEP_CFLAGS += -DBSP_NVRAM_BASE_ADDR=0xf1110000
-
-OP_SYS_LDLIBS += -lbspExt
 
 MUNCH_SUFFIX = .boot
 MUNCHNAME = $(PRODNAME:%$(EXE)=%$(MUNCH_SUFFIX))
 define MUNCH_CMD
-	$(RTEMS_TOOLS)/bin/$(OBJCOPY_FOR_TARGET) -O binary $< $@
+	$(RTEMS_BASE)/bin/$(OBJCOPY_FOR_TARGET) -O binary $< $@
 endef
 
 OP_SYS_LDLIBS += -lbspExt
diff --git a/configure/os/CONFIG.Common.RTEMS-pc386 b/configure/os/CONFIG.Common.RTEMS-pc386
index 2b20b97..80017e4 100644
--- a/configure/os/CONFIG.Common.RTEMS-pc386
+++ b/configure/os/CONFIG.Common.RTEMS-pc386
@@ -1,5 +1,5 @@
 #
-# $Revision-Id$
+# CONFIG.Common.RTEMS-pc386,v 1.4.2.2 2004/10/28 18:23:41 norume Exp
 # Author: W. Eric Norum
 #         Canadian Light Source
 #         eric@cls.usask.ca
@@ -11,7 +11,7 @@ RTEMS_TARGET_CPU=i386
 MUNCH_SUFFIX = .boot
 MUNCHNAME = $(PRODNAME:%$(EXE)=%$(MUNCH_SUFFIX))
 define MUNCH_CMD
-	$(RTEMS_TOOLS)/bin/$(OBJCOPY_FOR_TARGET) -O binary -R .comment -S $< temp.bin
+	$(RTEMS_BASE)/bin/$(OBJCOPY_FOR_TARGET) -O binary -R .comment -S $< temp.bin
 	$(BIN2BOOT) $@ 0x00097E00 \
 		$(PROJECT_RELEASE)/lib/start16.bin 0x00097C00 0 temp.bin 0x00100000 0
 	rm -f temp.bin
@@ -22,4 +22,7 @@ include $(CONFIG)/os/CONFIG.Common.RTEMS
 #
 # Put text segment where it will work with etherboot
 #
-OP_SYS_LDFLAGS += -Wl,-Ttext,0x100000
+# Suggested by Till Strauman
+# Must be removed for CEXP/run-time loading:
+#OP_SYS_LDFLAGS += -Wl,-Ttext,0x100000
+
diff --git a/configure/os/CONFIG.Common.RTEMS-pc586 b/configure/os/CONFIG.Common.RTEMS-pc586
new file mode 100644
index 0000000..5ce9ee4
--- /dev/null
+++ b/configure/os/CONFIG.Common.RTEMS-pc586
@@ -0,0 +1,35 @@
+#
+# $Revision-Id$
+# Author: W. Eric Norum
+#         Canadian Light Source
+#         eric@cls.usask.ca
+#
+# All RTEMS targets use the same Makefile fragment
+#
+
+RTEMS_TARGET_CPU=i386
+
+MUNCH_SUFFIX = .boot
+
+MUNCHNAME = $(PRODNAME:%$(EXE)=%$(MUNCH_SUFFIX))
+
+define MUNCH_CMD
+
+ 	$(RTEMS_TOOLS)/bin/$(OBJCOPY_FOR_TARGET) -O binary -R .comment -S $< temp.bin
+
+ 	$(PROJECT_RELEASE)/build-tools/bin2boot $@ 0x00097E00 \
+
+ 		$(PROJECT_RELEASE)/lib/start16.bin 0x00097C00 0 temp.bin 0x00100000 0
+
+ 	rm -f temp.bin
+
+endef
+ 
+include $(CONFIG)/os/CONFIG.Common.RTEMS
+
+#
+# Put text segment where it will work with etherboot
+#
+# Must be removed for CEXP/run-time loading:
+#OP_SYS_LDFLAGS += -Wl,-Ttext,0x100000
+
diff --git a/configure/os/CONFIG.Common.RTEMS-uC5282 b/configure/os/CONFIG.Common.RTEMS-uC5282
index 7dbc9d8..0fc90a8 100644
--- a/configure/os/CONFIG.Common.RTEMS-uC5282
+++ b/configure/os/CONFIG.Common.RTEMS-uC5282
@@ -1,18 +1,39 @@
 #
-# $Revision-Id$
+# CONFIG.Common.RTEMS-uC5282,v 1.1.2.1 2005/02/01 20:45:07 norume Exp
 # Author: W. Eric Norum
 #         Canadian Light Source
 #         eric@cls.usask.ca
 #
 # All RTEMS targets use the same Makefile fragment
 #
+override EXE=.elf
 RTEMS_TARGET_CPU = m68k
+GNU_TARGET=m68k-rtems
 ARCH_DEP_CFLAGS += -DMY_DO_BOOTP=NULL
+#ARCH_DEP_CFLAGS += -DHAVE_MOTLOAD
 
 MUNCH_SUFFIX = .boot
 MUNCHNAME = $(PRODNAME:%$(EXE)=%$(MUNCH_SUFFIX))
 define MUNCH_CMD
-	$(RTEMS_TOOLS)/bin/$(OBJCOPY_FOR_TARGET) -O binary -R .comment -S $< $@
+	$(RTEMS_BASE)/bin/$(OBJCOPY_FOR_TARGET) -O binary -R .comment -S $< $@
 endef
 
+CROSS_COMPILER_TARGET_ARCHS=RTEMS-uC5282
+
 include $(CONFIG)/os/CONFIG.Common.RTEMS
+
+RTEMSSYMS=$(PRODNAME:%$(EXE)=%.sym)
+RTEMSIMGS=$(PRODNAME:%$(EXE)=%.bin)
+INSTALL_RTEMSSYMS=$(RTEMSSYMS:%=$(INSTALL_BIN)/%)
+INSTALL_RTEMSIMGS=$(RTEMSIMGS:%=$(INSTALL_BIN)/%)
+
+%.sym: %$(EXE)
+	$(XSYMS) $^ $@
+
+%.bin: %$(EXE)
+	$(OBJCOPY) -Obinary $^ $@
+
+#
+# Must put this one so it shows up after the -m528x
+#
+OP_SYS_LDFLAGS += -m5200
diff --git a/configure/os/CONFIG.Common.linuxRT_glibc-i686 b/configure/os/CONFIG.Common.linuxRT_glibc-i686
new file mode 100644
index 0000000..4af4232
--- /dev/null
+++ b/configure/os/CONFIG.Common.linuxRT_glibc-i686
@@ -0,0 +1,20 @@
+# CONFIG.Common.linuxRT-x86
+#
+# This file is maintained by the build community.
+#
+# Definitions for linuxRT-x86 target builds
+# linuxRT is really linux-rt with uClibc produced by Till Strauman of
+# SLAC National Laboratories
+# Sites may override these definitions and add other definitions
+# in CONFIG_SITE.Common.linuxRT-x86
+#-------------------------------------------------------
+
+# Include definitions common to all Unix targets
+include $(CONFIG)/os/CONFIG.Common.linuxCommon
+VALID_BUILDS = Host Ioc
+ARCH_CLASS = x86
+ARCH_DEP_CPPFLAGS += -D_X86_
+
+# Silence annoying warnigs re _BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SOURCE
+OP_SYS_CPPFLAGS += -D_DEFAULT_SOURCE
+
diff --git a/configure/os/CONFIG.Common.linuxRT_glibc-x86_64 b/configure/os/CONFIG.Common.linuxRT_glibc-x86_64
new file mode 100644
index 0000000..0d81958
--- /dev/null
+++ b/configure/os/CONFIG.Common.linuxRT_glibc-x86_64
@@ -0,0 +1,20 @@
+# CONFIG.Common.linuxRT-x86_64
+#
+# This file is maintained by the build community.
+#
+# Definitions for linuxRT-x86_64 target builds
+# linuxRT is really linux-rt with glibc produced by Till Strauman of
+# SLAC National Laboratories
+# Sites may override these definitions and add other definitions
+# in CONFIG_SITE.Common.linuxRT-x86_64
+#-------------------------------------------------------
+
+# Include definitions common to all Unix targets
+include $(CONFIG)/os/CONFIG.Common.linuxCommon
+VALID_BUILDS = Host Ioc
+ARCH_CLASS = x86_64
+ARCH_DEP_CPPFLAGS += -D_X86_64_
+
+# Silence annoying warnigs re _BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SOURCE
+OP_SYS_CPPFLAGS += -D_DEFAULT_SOURCE
+
diff --git a/configure/os/CONFIG.Common.rt-linux b/configure/os/CONFIG.Common.rt-linux
new file mode 100755
index 0000000..1dcbd8d
--- /dev/null
+++ b/configure/os/CONFIG.Common.rt-linux
@@ -0,0 +1,36 @@
+# CONFIG.Common.linux-x86
+#
+# CONFIG.Common.linux-x86,v 1.16.2.9 2005/02/25 16:00:40 jba Exp
+# This file is maintained by the build community.
+#
+# Definitions for linux-x86 target builds
+# Sites may override these definitions in CONFIG_SITE.Common.linux-x86
+#-------------------------------------------------------
+
+# Include definitions common to all linux targets
+include $(CONFIG)/os/CONFIG.Common.linuxCommon
+
+ARCH_CLASS = x86
+
+ARCH_DEP_CPPFLAGS += -D_X86_
+
+#
+## The vendor's tool chain needs to be located here
+#
+ifeq ($(BUILD_CLASS),CROSS)
+    RT_LINUX_USR_DIR = /afs/slac/g/cd/swe/rhel6/package/rtLinux/toolchain/xtools/i686-nptl-linux-gnu/i686-nptl-linux-gnu/sys-root/usr
+    VALID_BUILDS = Ioc
+    GNU_DIR=/afs/slac/g/cd/swe/rhel6/package/rtLinux/toolchain/xtools/i686-nptl-linux-gnu/
+    #GNU_TARGET =
+    LDLIBS_READLINE=-lreadline -lncurses
+    #CMPLR_PREFIX = $(addsuffix -,$(GNU_TARGET))
+    CMPLR_PREFIX=rt-linux-
+    CROSS_INCLUDES= -I$(RT_LINUX_USR_DIR)/local/include
+    CROSS_LDFLAGS=
+    SHRLIB_SEARCH_FULLPATHDIRS += /afs/slac/g/cd/swe/rhel6/package/rtLinux/toolchain/xtools/i686-nptl-linux-gnu/lib/gcc/i686-nptl-linux-gnu/4.4.5
+    unexport GCC_EXEC_PREFIX
+endif
+
+
+
+
diff --git a/configure/os/CONFIG.Common.vxWorks-mpc8548 b/configure/os/CONFIG.Common.vxWorks-mpc8548
index 1dd6a1c..904b604 100644
--- a/configure/os/CONFIG.Common.vxWorks-mpc8548
+++ b/configure/os/CONFIG.Common.vxWorks-mpc8548
@@ -3,7 +3,7 @@
 # $Revision-Id$
 # This file is maintained by the build community.
 #
-# Definitions for vxWorks-mpc8548 target archs
+# Definitions for vxWorks-mpc8548 targets: MPC8548 CPU with >32MB RAM.
 # Sites may override these definitions in CONFIG_SITE.Common.vxWorks-mpc8548
 #-------------------------------------------------------
 
diff --git a/configure/os/CONFIG.Common.vxWorks-pentium4 b/configure/os/CONFIG.Common.vxWorks-pentium4
new file mode 100644
index 0000000..e8f933c
--- /dev/null
+++ b/configure/os/CONFIG.Common.vxWorks-pentium4
@@ -0,0 +1,29 @@
+# CONFIG.Common.vxWorks-pentium4
+#
+# Revision-Id:
+# This file is maintained by the build community.
+#
+# Definitions for vxWorks-pentium4 target archs
+# Sites may override these definitions in CONFIG_SITE.Common.vxWorks-pentium4
+#-------------------------------------------------------
+
+# Include definitions common to all vxWorks target archs
+include $(CONFIG)/os/CONFIG.Common.vxWorksCommon
+
+# ======================================================================================
+# Define "VSB_DIR" and "VXB_CONFIG_FILE" to get rid of warning message in vxWorks 6.8
+# ======================================================================================
+VSB_DIR=$(WIND_BASE)/vxworks-6.8/target/lib
+# =====================================================================================
+
+# Vx GNU cross compiler suffix
+CMPLR_SUFFIX = pentium
+ 
+ARCH_CLASS = pentium
+
+ARCH_DEP_CPPFLAGS = -DCPU=PENTIUM4 -D_X86_ -D_WRS_KERNEL -MD -MP
+ARCH_DEP_CPPFLAGS += -D_VSB_CONFIG_FILE=\"$(VSB_DIR)/h/config/vsbConfig.h\"
+ARCH_DEP_CFLAGS += -mtune=pentium4 -march=pentium4
+ARCH_DEP_CXXFLAGS += -x 'c++' 
+ARCH_DEP_CFLAGS += -fno-defer-pop -nostdlib
+
diff --git a/configure/os/CONFIG.Common.vxWorks-pentium4-debug b/configure/os/CONFIG.Common.vxWorks-pentium4-debug
new file mode 100644
index 0000000..104841a
--- /dev/null
+++ b/configure/os/CONFIG.Common.vxWorks-pentium4-debug
@@ -0,0 +1,14 @@
+# CONFIG.Common.vxWorks-pentium4-debug
+#
+# Revision-Id:
+# This file is maintained by the build community.
+#
+# Definitions for vxWorks-pentium-debug target archs
+# Sites may override these definitions in CONFIG_SITE.Common.vxWorks-pentium4-debug
+#-------------------------------------------------------
+
+# Include definitions common to all vxWorks archs
+include $(CONFIG)/os/CONFIG.Common.vxWorks-pentium4
+
+CROSS_OPT = NO
+
diff --git a/configure/os/CONFIG.Common.vxWorks-pentium4-smp b/configure/os/CONFIG.Common.vxWorks-pentium4-smp
new file mode 100644
index 0000000..862a5f3
--- /dev/null
+++ b/configure/os/CONFIG.Common.vxWorks-pentium4-smp
@@ -0,0 +1,30 @@
+# CONFIG.Common.vxWorks-pentium4-smp
+#
+# Revision-Id:
+# This file is maintained by the build community.
+#
+# Definitions for vxWorks-pentium4-smp target archs
+# Sites may override these definitions in CONFIG_SITE.Common.vxWorks-pentium4
+#-------------------------------------------------------
+
+# Include definitions common to all vxWorks target archs
+include $(CONFIG)/os/CONFIG.Common.vxWorksCommon
+
+# ======================================================================================
+# Define "VSB_DIR" and "VXB_CONFIG_FILE" to get rid of warning message in vxWorks 6.8
+# ======================================================================================
+VSB_DIR=$(WIND_BASE)/vxworks-6.8/target/lib_smp
+
+# =====================================================================================
+
+# Vx GNU cross compiler suffix
+CMPLR_SUFFIX = pentium
+ 
+ARCH_CLASS = pentium
+
+ARCH_DEP_CPPFLAGS = -DCPU=PENTIUM4 -D_X86_ -D_WRS_KERNEL -D_WRS_VX_SMP -MD -MP 
+ARCH_DEP_CPPFLAGS += -D_VSB_CONFIG_FILE=\"$(VSB_DIR)/h/config/vsbConfig.h\"
+ARCH_DEP_CFLAGS += -mtune=pentium4 -march=pentium4
+ARCH_DEP_CXXFLAGS += -x 'c++' 
+ARCH_DEP_CFLAGS += -fno-defer-pop -nostdlib
+
diff --git a/configure/os/CONFIG.Common.vxWorks-pentium4-smp-debug b/configure/os/CONFIG.Common.vxWorks-pentium4-smp-debug
new file mode 100644
index 0000000..dd1409a
--- /dev/null
+++ b/configure/os/CONFIG.Common.vxWorks-pentium4-smp-debug
@@ -0,0 +1,14 @@
+# CONFIG.Common.vxWorks-pentium4-debug
+#
+# Revision-Id:
+# This file is maintained by the build community.
+#
+# Definitions for vxWorks-pentium-debug target archs
+# Sites may override these definitions in CONFIG_SITE.Common.vxWorks-pentium4-debug
+#-------------------------------------------------------
+
+# Include definitions common to all vxWorks archs
+include $(CONFIG)/os/CONFIG.Common.vxWorks-pentium4-smp
+
+CROSS_OPT = NO
+
diff --git a/configure/os/CONFIG.Common.vxWorksCommon b/configure/os/CONFIG.Common.vxWorksCommon
index ee6efa9..f70ee83 100644
--- a/configure/os/CONFIG.Common.vxWorksCommon
+++ b/configure/os/CONFIG.Common.vxWorksCommon
@@ -93,7 +93,6 @@ VX_GNU_VERSION_6.5 = 3.4.4
 VX_GNU_VERSION_6.6 = 4.1.2
 VX_GNU_VERSION_6.7 = 4.1.2
 VX_GNU_VERSION_6.8 = 4.1.2
-VX_GNU_VERSION_6.9 = 4.3.3
 VX_GNU_VERSION = $(VX_GNU_VERSION_$(VXWORKS_VERSION))
 
 VX_GNU_MAJOR_VERSION = $(basename $(basename $(VX_GNU_VERSION)))
@@ -135,7 +134,6 @@ NM_DIR_6.5 = $(WORKBENCH_BIN)
 NM_DIR_6.6 = $(WORKBENCH_BIN)
 NM_DIR_6.7 = $(GNU_BIN)
 NM_DIR_6.8 = $(UTILITIES_BIN)
-NM_DIR_6.9 = $(UTILITIES_BIN)
 NM_DIR = $(firstword $(NM_DIR_$(VXWORKS_VERSION)) $(GNU_BIN))
 
 NM = $(NM_DIR)/$(CMPLR_PREFIX)nm$(CMPLR_SUFFIX)$(HOSTEXE)
@@ -173,8 +171,8 @@ OP_SYS_INCLUDE_CPPFLAGS += -include $(VX_DIR)/target/h/vxWorks.h
 
 #--------------------------------------------------
 # Optimization: Officially vxWorks only supports -O2 or less.
-OPT_CFLAGS_YES = -O2
-OPT_CXXFLAGS_YES = -O2
+OPT_CFLAGS_YES = -O2 
+OPT_CXXFLAGS_YES = -O2 
 
 #--------------------------------------------------
 # code flags
diff --git a/configure/os/CONFIG_SITE.Common.RTEMS b/configure/os/CONFIG_SITE.Common.RTEMS
index d2cccea..b87539c 100644
--- a/configure/os/CONFIG_SITE.Common.RTEMS
+++ b/configure/os/CONFIG_SITE.Common.RTEMS
@@ -5,15 +5,58 @@
 # Site-specific information for all RTEMS targets
 #-------------------------------------------------------
 
-# Where to find RTEMS
+# Don't use the default after relocating RTEMS tool-chain and OS
+# things necessary were not being found properly.  Also, had to
+# to modify the Makefile.in for each BSP to change path for 
+# "prefix" and "exec_prefix"
+unexport GCC_EXEC_PREFIX
+
+#
+# If you're not using BOOTP/DHCP to pick up your IOC network configuration
+# you may need to specify your Internet Domain Name here
 #
 # APS:
-RTEMS_VERSION = 4.10.2
-RTEMS_BASE = /usr/local/vw/rtems/rtems-$(RTEMS_VERSION)
+#RTEMS_VERSION = 4.10.2
+#RTEMS_BASE = /usr/local/vw/rtems/rtems-$(RTEMS_VERSION)
 
-# Cross-compile toolchain in $(RTEMS_TOOLS)/bin
 #
-RTEMS_TOOLS = $(RTEMS_BASE)
+# Specify your desired command-line-input library
+#
+#EPICSCOMMANDLINE_LIBRARY = READLINE
+RTEMS_SITE_INSTALLDIR=$(RTEMS_SITE_TOP)/target/$(RTEMS_PATCHLVL)/$(SSRLAPPS_PATCHLVL)/$(RTEMS_TARGET_CPU)-rtems/$(RTEMS_BSP)/
+CROSS_INCLUDES+= -I$(RTEMS_SITE_INSTALLDIR)/include
+CROSS_LDFLAGS += -L$(RTEMS_SITE_INSTALLDIR)/lib
+
+GNU_DIR=$(RTEMS_BASE)
+CCC = $(CC)
+#TS, 2/6/2002 re-allow using the gnu dir
+#because I put libraries common to multiple BSPs there
+#GNU_TARGET_LIB_DIR resolves to GNU_DIR/GNU_TARGET/lib
+CROSS_LDFLAGS = $(addprefix -L,$(GNU_TARGET_LIB_DIR))
+CROSS_LDFLAGS+= -L$(PROJECT_RELEASE)/lib
+ifdef RTEMS_SITE_INSTALLDIR
+CROSS_LDFLAGS+= -L$(RTEMS_SITE_INSTALLDIR)/lib
+endif
+#OPT_CFLAGS_YES = -g -O3
+#OPT_CXXFLAGS_YES = -g -O3
+
+# =====================================================================
+# Recommended by Till Strauman:
+# For Host Builds.
+# Let's build with optimization but have debug symbols for debugging:
+# =====================================================================
+OPT_CFLAGS_YES   = $(CFLAGS_OPTIMIZE_V) -g
+OPT_CXXFLAGS_YES = $(CFLAGS_OPTIMIZE_V) -g
+
+OBJCOPY = $(RTEMS_BASE)/bin/$(OBJCOPY_FOR_TARGET)
+XSYMS = $(RTEMS_BASE)/bin/xsyms
+
+OP_SYS_CPPFLAGS =
+# rtemsall is now rtemsbsp, we use termcap, not ncurses
+#OP_SYS_LDLIBS = -lrtemsCom -lrtemsbsp -lrtemscpu -lbspExt -lcexp -lbfd -lopcodes -liberty -lregexp -ltecla_r -lm
+
+#no LDLIBS whatsoever - we now do dynamic loading
+override EXE = .obj
 
 # Link Generic System loadable objects instead of full executable.
 #
@@ -22,14 +65,32 @@ RTEMS_TOOLS = $(RTEMS_BASE)
 # patch against RTEMS.
 USE_GESYS = NO
 
-# If you're using neither BOOTP/DHCP nor FLASH to pick up your IOC
-# network configuration you must uncomment and specify your Internet
-# Domain Name here
+#OP_SYS_LDLIBS = -lrtemsCom
+OP_SYS_LDFLAGS = -Wl,-S
+
+LINK.cpp = $(CCC) -nostdlib -Wl,-r -o $@ $(STATIC_LDFLAGS) $(PRODDIR_LDFLAGS) $(LDFLAGS)
+LINK.cpp += $(PROD_LDFLAGS) $(PROD_LD_OBJS) $(PROD_LD_RESS) $(PROD_LDLIBS)
+
+ 
+# ===========================================================================================
 #
-#OP_SYS_CFLAGS += -DRTEMS_NETWORK_CONFIG_DNS_DOMAINNAME=<domainname>
+# SSRLAPPS package. 
+# ===========================================================================================
+# Top location (for specific CPU and BSP):
+##SSRLAPPS= $(RTEMS_BASE)/ssrlApps/$(RTEMS_TARGET_CPU)-rtems$(RTEMS_VERSION)/$(T_A:RTEMS-%=%) 
+
+# If anything, apps need the headers
+
+##OP_SYS_INCLUDES += -I$(SSRLAPPS)/include 
 
-# Select the command-line-input library to use
+# Very unlikely that they need a library from there, too
+# since things are usually contained in modules that are
+# run-time loaded prior to EPICS.
+
+#
+# If any application really needs a library 'foo' then
+# their Makefile should say:
 #
-COMMANDLINE_LIBRARY = EPICS
-#COMMANDLINE_LIBRARY = LIBTECLA
-#COMMANDLINE_LIBRARY = READLINE
+# foo_DIR=$(SSRLAPPS_LIB)
+##SSRLAPPS_LIB=$(SSRLAPPS)/lib
+
diff --git a/configure/os/CONFIG_SITE.Common.iosCommon b/configure/os/CONFIG_SITE.Common.iosCommon
index a964c5b..6414801 100644
--- a/configure/os/CONFIG_SITE.Common.iosCommon
+++ b/configure/os/CONFIG_SITE.Common.iosCommon
@@ -20,6 +20,15 @@ IOS_DEPLOYMENT_TARGET = 8.0
 # Older versions of Xcode may require this SDK_DIR definition
 #SDK_DIR = $(PLATFORM_DIR)/Developer/SDKs/$(IOS_PLATFORM)$(IOS_DEPLOYMENT_TARGET).sdk
 
+# Minimum version of iOS the executables must run on.
+# Earlier versions may work, if XCode supports them.
+
+#IOS_DEPLOYMENT_TARGET = 5.0
+#IOS_DEPLOYMENT_TARGET = 5.1
+#IOS_DEPLOYMENT_TARGET = 6.0
+#IOS_DEPLOYMENT_TARGET = 6.1
+IOS_DEPLOYMENT_TARGET = 7.0
+
 
 # Which compiler to use:
 #   CLANG is required for Xcode 5.0 and later
diff --git a/configure/os/CONFIG_SITE.Common.linux-x86 b/configure/os/CONFIG_SITE.Common.linux-x86
index 9e7262c..6b71d3c 100644
--- a/configure/os/CONFIG_SITE.Common.linux-x86
+++ b/configure/os/CONFIG_SITE.Common.linux-x86
@@ -24,10 +24,10 @@
 # comment them all out to build without readline support.
 
 # No other libraries needed (recent Fedora, Ubuntu etc.):
-COMMANDLINE_LIBRARY = READLINE
+#COMMANDLINE_LIBRARY = READLINE
 
 # Needs -lncurses (RHEL 5 etc.):
-#COMMANDLINE_LIBRARY = READLINE_NCURSES
+COMMANDLINE_LIBRARY = READLINE_NCURSES
 
 # Needs -lcurses (older versions)
 #COMMANDLINE_LIBRARY = READLINE_CURSES
diff --git a/configure/os/CONFIG_SITE.Common.linux-x86_64 b/configure/os/CONFIG_SITE.Common.linux-x86_64
index ddc90d5..3f37d1a 100644
--- a/configure/os/CONFIG_SITE.Common.linux-x86_64
+++ b/configure/os/CONFIG_SITE.Common.linux-x86_64
@@ -24,10 +24,10 @@
 # comment them all out to build without readline support.
 
 # No other libraries needed (recent Fedora, Ubuntu etc.):
-COMMANDLINE_LIBRARY = READLINE
+#COMMANDLINE_LIBRARY = READLINE
 
 # Needs -lncurses (RHEL 5 etc.):
-#COMMANDLINE_LIBRARY = READLINE_NCURSES
+COMMANDLINE_LIBRARY = READLINE_NCURSES
 
 # Needs -lcurses (older versions)
 #COMMANDLINE_LIBRARY = READLINE_CURSES
diff --git a/configure/os/CONFIG_SITE.Common.linuxRT_glibc-i686 b/configure/os/CONFIG_SITE.Common.linuxRT_glibc-i686
new file mode 100644
index 0000000..54131a2
--- /dev/null
+++ b/configure/os/CONFIG_SITE.Common.linuxRT_glibc-i686
@@ -0,0 +1,44 @@
+# Build types
+VALID_BUILDS = Ioc
+
+# Location of linuxRT GNU ToolChain
+#LINUX_RT_HOME=/nfs/slac/g/lcls/build/linuxRT
+#LINUX_RT_HOME=/usr/local/common
+#LINUX_RT_HOME=/home/ernesto/packages
+#LINUX_RT_HOME=/afs/slac/g/lcls/package/linuxRT
+LINUX_RT_HOME=/afs/slac/package/linuxRT
+
+GNU_DIR=$(LINUX_RT_HOME)/buildroot-2015.02/host/linux-x86_64/i686/usr
+
+# Cross Target Architecture
+GNU_TARGET=i686-linux
+
+# Could substitute prefix of rpath here
+#SHRLIBDIR_RPATH_LDFLAGS_YES = $(SHRLIB_DEPLIB_DIRS:%=-Wl,-rpath,%)
+# Only static build is supported at this time.
+SHARED_LIBRARIES=NO
+STATIC_BUILD=YES
+
+# =====================================================================
+# Recommended by Till Strauman:
+# For linuxRT-x86 Builds.
+# Let's build with optimization but have debug symbols for debugging:
+# =====================================================================
+OPT_CFLAGS_YES = -O3 -g
+OPT_CXXFLAGS_YES = -O3 -g
+
+
+# =================================================
+# # Add support for readline: used by
+# # EPICS IOC Shell for command line history, etc...
+# #  ================================================
+COMMANDLINE_LIBRARY = READLINE
+
+
+# =========================================================================
+# Valgrind support
+# =========================================================================
+VALGRIND_TOP=/afs/slac/g/lcls/package/valgrind/3.10.1
+VALGRIND_INCLUDE=$(VALGRIND_TOP)/buildroot_2015.2/install/linuxRT_glibc-i686/include
+VALGRIND_LIB=$(VALGRIND_TOP)/buildroot_2015.2/install/linuxRT_glibc-i686/lib
+
diff --git a/configure/os/CONFIG_SITE.Common.linuxRT_glibc-x86_64 b/configure/os/CONFIG_SITE.Common.linuxRT_glibc-x86_64
new file mode 100644
index 0000000..e8c1645
--- /dev/null
+++ b/configure/os/CONFIG_SITE.Common.linuxRT_glibc-x86_64
@@ -0,0 +1,42 @@
+# Build types
+VALID_BUILDS = Ioc
+
+# Location of linuxRT GNU ToolChain
+#LINUX_RT_HOME=/nfs/slac/g/lcls/build/linuxRT
+#LINUX_RT_HOME=/usr/local/common
+#LINUX_RT_HOME=/home/ernesto/packages
+LINUX_RT_HOME=/afs/slac/package/linuxRT
+
+LINUXRT_BUILDROOT_VERSION=buildroot-2015.02
+GNU_DIR=$(LINUX_RT_HOME)/$(LINUXRT_BUILDROOT_VERSION)/host/linux-x86_64/x86_64/usr
+
+# Cross Target Architecture
+GNU_TARGET=x86_64-linux
+
+# Could substitute prefix of rpath here
+#SHRLIBDIR_RPATH_LDFLAGS_YES = $(SHRLIB_DEPLIB_DIRS:%=-Wl,-rpath,%)
+# Only static build is supported at this time.
+SHARED_LIBRARIES=NO
+STATIC_BUILD=YES
+
+# =====================================================================
+# Recommended by Till Strauman:
+# For linuxRT-x86 Builds.
+# Let's build with optimization but have debug symbols for debugging:
+# =====================================================================
+OPT_CFLAGS_YES = -O3 -g
+OPT_CXXFLAGS_YES = -O3 -g
+
+# =================================================
+# Add support for readline: used by
+# EPICS IOC Shell for command line history, etc...
+#  ================================================
+COMMANDLINE_LIBRARY = READLINE
+
+# =========================================================================
+# Valgrind support
+# =========================================================================
+VALGRIND_TOP=/afs/slac/g/lcls/package/valgrind/3.10.1
+VALGRIND_INCLUDE=$(VALGRIND_TOP)/buildroot_2015.2/install/linuxRT_glibc-x86_64/include
+VALGRIND_LIB=$(VALGRIND_TOP)/buildroot_2015.2/install/linuxRT_glibc-x86_64/lib
+
diff --git a/configure/os/CONFIG_SITE.Common.vxWorksCommon b/configure/os/CONFIG_SITE.Common.vxWorksCommon
index 17696fd..614ed51 100644
--- a/configure/os/CONFIG_SITE.Common.vxWorksCommon
+++ b/configure/os/CONFIG_SITE.Common.vxWorksCommon
@@ -10,14 +10,14 @@
 # Note: vxWorks 5.3 (Tornado 1.x) is not supported
 
 #VXWORKS_VERSION = 5.4
-VXWORKS_VERSION = 5.5
+#VXWORKS_VERSION = 5.5
 #VXWORKS_VERSION = 6.0
 #VXWORKS_VERSION = 6.1
 #VXWORKS_VERSION = 6.2
 #VXWORKS_VERSION = 6.3
 #VXWORKS_VERSION = 6.4
 #VXWORKS_VERSION = 6.5
-#VXWORKS_VERSION = 6.6
+VXWORKS_VERSION = 6.6
 #VXWORKS_VERSION = 6.7
 #VXWORKS_VERSION = 6.8
 #VXWORKS_VERSION = 6.9
@@ -31,19 +31,53 @@ VXWORKS_VERSION = 5.5
 # Under vxWorks 6.x this is *not* the same as the old VX_DIR setting
 
 #WIND_BASE = /usr/local/vw/tornado202p1
-WIND_BASE = /usr/local/vw/tornado22-$(ARCH_CLASS)
+#WIND_BASE = /usr/local/vw/tornado22-$(ARCH_CLASS)
 #WIND_BASE = /usr/local/vw/vxWorks-$(VXWORKS_VERSION)
 #WIND_BASE = /ade/vxWorks/$(VXWORKS_VERSION)
+#WIND_BASE = /usr/local/lcls/vxWorks/$(VXWORKS_VERSION)
+WIND_BASE = /afs/slac/package/vxworks/devel/$(VXWORKS_VERSION)
+
+# ====================================================================
+# Added to support the new vxWorks 6.7 and 6.8
+# Unless we use "-DBSD=44" for osdSock.h, incorrect network interface
+# structure is assumed, and an incorrect list of interfaces is
+# constructed, then the EPICS_CA_{,AUTO_}ADDR_LIST behavior becomes
+# wrong.
+# =====================================================================
+#BSD_DEFINE_VERSION_6.7 = -DBSD=44
+##BSD_DEFINE_VERSION_6.8 = -DBSD=44
+##OP_BSD_DEFINE = $(BSD_DEFINE_VERSION_$(VXWORKS_VERSION))
+
+##OP_SYS_CPPFLAGS += -DvxWorks $(OP_BSD_DEFINE)
+##OP_SYS_CFLAGS += -fno-builtin $(OP_BSD_DEFINE)
+
+# For vxWorks 6.6 we just need:
+OP_SYS_CPPFLAGS += -DvxWorks
+OP_SYS_CFLAGS += -fno-builtin
+
+# =====================================================================
+
+#--------------------------------------------------
+# Optimization: Officially vxWorks only supports -O2 or less.
+# =====================================================================
+# Recommended by Till Strauman:
+# For Cross Builds.
+# Let's build with optimization but have debug symbols for debugging:
+# =====================================================================
+OPT_CFLAGS_YES = -O2 -g
+OPT_CXXFLAGS_YES = -O2 -g
+
 
 
 # WorkBench Version number, required for vxWorks 6.x
 
 #WORKBENCH_VERSION = 2.6
-#WORKBENCH_VERSION = 3.0
+WORKBENCH_VERSION = 3.0
+#WORKBENCH_VERSION = 3.1
 #WORKBENCH_VERSION = 3.2
 #WORKBENCH_VERSION = 3.3
 
 
 # Utilities Version number, required from vxWorks 6.8 and later
 
-#UTILITIES_VERSION = 1.0
+UTILITIES_VERSION = 1.0
diff --git a/configure/os/CONFIG_SITE.linux-x86.Common b/configure/os/CONFIG_SITE.linux-x86.Common
index f5a3e91..6d4bdca 100644
--- a/configure/os/CONFIG_SITE.linux-x86.Common
+++ b/configure/os/CONFIG_SITE.linux-x86.Common
@@ -10,3 +10,11 @@
 #CROSS_COMPILER_TARGET_ARCHS = vxWorks-68040 solaris-sparc
 #CROSS_COMPILER_TARGET_ARCHS = vxWorks-68040
 #CROSS_COMPILER_TARGET_ARCHS = RTEMS-mvme2100 RTEMS-pc386 # RTEMS-mvme5500 RTEMS-mvme167
+
+# =====================================================================
+# Recommended by Till Strauman:
+# For Host Builds.
+# Let's build with optimization but have debug symbols for debugging:
+# =====================================================================
+OPT_CFLAGS_YES = -O3 -g
+OPT_CXXFLAGS_YES = -O3 -g
diff --git a/configure/os/CONFIG_SITE.linux-x86_64.Common b/configure/os/CONFIG_SITE.linux-x86_64.Common
index 3604f4d..0c9626b 100644
--- a/configure/os/CONFIG_SITE.linux-x86_64.Common
+++ b/configure/os/CONFIG_SITE.linux-x86_64.Common
@@ -10,3 +10,10 @@
 #CROSS_COMPILER_TARGET_ARCHS = vxWorks-68040
 #CROSS_COMPILER_TARGET_ARCHS = RTEMS-mvme2100
 
+# =====================================================================
+# Recommended by Till Strauman:
+# For Host Builds.
+# Let's build with optimization but have debug symbols for debugging:
+# =====================================================================
+OPT_CFLAGS_YES = -O3 -g
+OPT_CXXFLAGS_YES = -O3 -g
diff --git a/configure/os/CONFIG_SITE.linux-x86_64.RTEMS b/configure/os/CONFIG_SITE.linux-x86_64.RTEMS
new file mode 100644
index 0000000..e99fce6
--- /dev/null
+++ b/configure/os/CONFIG_SITE.linux-x86_64.RTEMS
@@ -0,0 +1,19 @@
+
+#
+# Site-specific information for all RTEMS targets
+#
+#-------------------------------------------------------
+
+# CEXP run-time loading
+override EXE=.obj
+OP_SYS_LDFLAGS = $(CPU_CFLAGS) -Wl,-r -nostdlib
+
+# To strip debugging symbols add
+#OP_SYS_LDFLAGS += -Wl,-S
+
+#Don't bother to build munched binaries
+MUNCH_CMD=
+MUNCHNAME=
+ 
+#
+OP_SYS_LDLIBS=
