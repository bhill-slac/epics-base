diff --git a/src/std/rec/aSubRecord.c b/src/std/rec/aSubRecord.c
index c014dd0..c40f0b0 100644
--- a/src/std/rec/aSubRecord.c
+++ b/src/std/rec/aSubRecord.c
@@ -264,6 +264,7 @@ static long process(aSubRecord *prec)
         return 0;
 
     prec->pact = TRUE;
+    recGblGetTimeStamp(prec);
 
     /* Push the output link values */
     if (!status) {
@@ -274,7 +275,6 @@ static long process(aSubRecord *prec)
                 (&prec->neva)[i]);
     }
 
-    recGblGetTimeStamp(prec);
     monitor(prec);
     recGblFwdLink(prec);
     prec->pact = FALSE;
diff --git a/src/std/rec/aaoRecord.c b/src/std/rec/aaoRecord.c
index 565fd28..9c908f3 100644
--- a/src/std/rec/aaoRecord.c
+++ b/src/std/rec/aaoRecord.c
@@ -165,12 +165,22 @@ static long process(aaoRecord *prec)
         return S_dev_missingSup;
     }
 
+    if ( !pact ) {
+	/* Update the timestamp before writing output values so it
+	 * will be uptodate if any downstream records fetch it via TSEL */
+	recGblGetTimeStamp(prec);
+    }
+
     status = writeValue(prec); /* write the data */
     if (!pact && prec->pact) return 0;
     prec->pact = TRUE;
 
+    if ( pact ) {
+    	/* Update timestamp again for asynchronous devices */
+	recGblGetTimeStamp(prec);
+    }
+
     prec->udf = FALSE;
-    recGblGetTimeStamp(prec);
 
     monitor(prec);
     /* process the forward scan link record */
diff --git a/src/std/rec/aoRecord.c b/src/std/rec/aoRecord.c
index 06dc158..f1fd71a 100644
--- a/src/std/rec/aoRecord.c
+++ b/src/std/rec/aoRecord.c
@@ -198,6 +198,10 @@ static long process(aoRecord *prec)
                 }
 		if(!status) convert(prec, value);
 		prec->udf = isnan(prec->val);
+
+		/* Update the timestamp before writing output values so it
+		 * will be uptodate if any downstream records fetch it via TSEL */
+		recGblGetTimeStamp(prec);
 	}
 
 	/* check for alarms */
@@ -231,7 +235,10 @@ static long process(aoRecord *prec)
 	if ( !pact && prec->pact ) return(0);
 	prec->pact = TRUE;
 
-	recGblGetTimeStamp(prec);
+	if ( pact ) {
+		/* Update timestamp again for asynchronous devices */
+		recGblGetTimeStamp(prec);
+	}
 
 	/* check event list */
 	monitor(prec);
diff --git a/src/std/rec/boRecord.c b/src/std/rec/boRecord.c
index 8818455..c305670 100644
--- a/src/std/rec/boRecord.c
+++ b/src/std/rec/boRecord.c
@@ -220,6 +220,10 @@ static long process(boRecord *prec)
 			if(prec->val==0) prec->rval = 0;
 			else prec->rval = prec->mask;
 		} else prec->rval = (epicsUInt32)prec->val;
+
+		/* Update the timestamp before writing output values so it
+		 * will be uptodate if any downstream records fetch it via TSEL */
+		recGblGetTimeStamp(prec);
 	}
 
 	/* check for alarms */
@@ -256,7 +260,11 @@ static long process(boRecord *prec)
 	if ( !pact && prec->pact ) return(0);
 	prec->pact = TRUE;
 
-	recGblGetTimeStamp(prec);
+	if ( pact ) {
+	    /* Update timestamp again for asynchronous devices */
+	    recGblGetTimeStamp(prec);
+	}
+
 	if((prec->val==1) && (prec->high>0)){
 	    myCallback *pcallback;
 	    pcallback = (myCallback *)(prec->rpvt);
diff --git a/src/std/rec/calcoutRecord.c b/src/std/rec/calcoutRecord.c
index c62b3f4..493b987 100644
--- a/src/std/rec/calcoutRecord.c
+++ b/src/std/rec/calcoutRecord.c
@@ -217,6 +217,7 @@ static long process(calcoutRecord *prec)
 {
     rpvtStruct *prpvt = prec->rpvt;
     int doOutput;
+	unsigned char    pact=prec->pact;
 
     if (!prec->pact) {
         prec->pact = TRUE;
@@ -232,6 +233,12 @@ static long process(calcoutRecord *prec)
             }
         }
         checkAlarms(prec);
+
+	if ( !pact ) {
+	    /* Update the timestamp before writing output values so it
+	     * will be uptodate if any downstream records fetch it via TSEL */
+	    recGblGetTimeStamp(prec);
+	}
         /* check for output link execution */
         switch (prec->oopt) {
         case calcoutOOPT_Every_Time:
@@ -260,7 +267,6 @@ static long process(calcoutRecord *prec)
         if (doOutput) {
             if (prec->odly > 0.0) {
                 prec->dlya = 1;
-                recGblGetTimeStamp(prec);
                 db_post_events(prec, &prec->dlya, DBE_VALUE);
                 callbackRequestProcessCallbackDelayed(&prpvt->doOutCb,
                         prec->prio, prec, (double)prec->odly);
@@ -272,11 +278,12 @@ static long process(calcoutRecord *prec)
                 prec->pact = TRUE;
             }
         }
-        recGblGetTimeStamp(prec);
     } else { /* pact == TRUE */
+	/* Update timestamp again for asynchronous devices */
+	recGblGetTimeStamp(prec);
+
         if (prec->dlya) {
             prec->dlya = 0;
-            recGblGetTimeStamp(prec);
             db_post_events(prec, &prec->dlya, DBE_VALUE);
             /* Make pact FALSE for asynchronous device support*/
             prec->pact = FALSE;
@@ -285,7 +292,6 @@ static long process(calcoutRecord *prec)
             prec->pact = TRUE;
         } else {/*Device Support is asynchronous*/
             writeValue(prec);
-            recGblGetTimeStamp(prec);
         }
     }
     monitor(prec);
diff --git a/src/std/rec/longoutRecord.c b/src/std/rec/longoutRecord.c
index b168bf1..f7b5fb9 100644
--- a/src/std/rec/longoutRecord.c
+++ b/src/std/rec/longoutRecord.c
@@ -147,6 +147,10 @@ static long process(longoutRecord *prec)
 			value = prec->val;
 		}
 		if (!status) convert(prec,value);
+
+		/* Update the timestamp before writing output values so it
+		 * will be uptodate if any downstream records fetch it via TSEL */
+		recGblGetTimeStamp(prec);
 	}
 
 	/* check for alarms */
@@ -178,7 +182,10 @@ static long process(longoutRecord *prec)
 	if ( !pact && prec->pact ) return(0);
 	prec->pact = TRUE;
 
-	recGblGetTimeStamp(prec);
+	if ( pact ) {
+	    /* Update timestamp again for asynchronous devices */
+	    recGblGetTimeStamp(prec);
+	}
 
 	/* check event list */
 	monitor(prec);
diff --git a/src/std/rec/mbboDirectRecord.c b/src/std/rec/mbboDirectRecord.c
index b985971..60e296a 100644
--- a/src/std/rec/mbboDirectRecord.c
+++ b/src/std/rec/mbboDirectRecord.c
@@ -203,6 +203,10 @@ static long process(mbboDirectRecord *prec)
         prec->udf = FALSE;
         /* Convert VAL to RVAL */
         convert(prec);
+
+        /* Update the timestamp before writing output values so it
+         * will be uptodate if any downstream records fetch it via TSEL */
+        recGblGetTimeStamp(prec);
     }
 
 CONTINUE:
@@ -233,7 +237,12 @@ CONTINUE:
         return 0;
 
     prec->pact = TRUE;
-    recGblGetTimeStamp(prec);
+
+    if ( pact ) {
+        /* Update timestamp again for asynchronous devices */
+        recGblGetTimeStamp(prec);
+    }
+
     monitor(prec);
 
     /* Wrap up */
diff --git a/src/std/rec/mbboRecord.c b/src/std/rec/mbboRecord.c
index 0ba0cbf..a54f37e 100644
--- a/src/std/rec/mbboRecord.c
+++ b/src/std/rec/mbboRecord.c
@@ -222,6 +222,10 @@ static long process(mbboRecord *prec)
         prec->udf = FALSE;
         /* Convert VAL to RVAL */
         convert(prec);
+
+        /* Update the timestamp before writing output values so it
+         * will be uptodate if any downstream records fetch it via TSEL */
+        recGblGetTimeStamp(prec);
     }
 
 CONTINUE:
@@ -255,7 +259,12 @@ CONTINUE:
         return 0;
 
     prec->pact = TRUE;
-    recGblGetTimeStamp(prec);
+
+    if ( pact ) {
+        /* Update timestamp again for asynchronous devices */
+        recGblGetTimeStamp(prec);
+    }
+
     monitor(prec);
 
     /* Wrap up */
diff --git a/src/std/rec/stringoutRecord.c b/src/std/rec/stringoutRecord.c
index ea90129..33bf1e7 100644
--- a/src/std/rec/stringoutRecord.c
+++ b/src/std/rec/stringoutRecord.c
@@ -148,6 +148,10 @@ static long process(stringoutRecord *prec)
                 recGblSetSevr(prec,UDF_ALARM,prec->udfs);
         }
 
+	/* Update the timestamp before writing output values so it
+	 * will be uptodate if any downstream records fetch it via TSEL */
+	recGblGetTimeStamp(prec);
+
         if (prec->nsev < INVALID_ALARM )
                 status=writeValue(prec); /* write the new value */
         else {
@@ -174,7 +178,12 @@ static long process(stringoutRecord *prec)
 	if ( !pact && prec->pact ) return(0);
 
 	prec->pact = TRUE;
-	recGblGetTimeStamp(prec);
+
+	if ( pact ) {
+		/* Update timestamp again for asynchronous devices */
+		recGblGetTimeStamp(prec);
+	}
+
 	monitor(prec);
 	recGblFwdLink(prec);
 	prec->pact=FALSE;
